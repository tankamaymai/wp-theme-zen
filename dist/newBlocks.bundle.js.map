{"version":3,"file":"newBlocks.bundle.js","mappings":"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","sources":["webpack://wp-theme-zen/external window [\"wp\",\"blocks\"]","webpack://wp-theme-zen/external window [\"wp\",\"i18n\"]","webpack://wp-theme-zen/external window [\"wp\",\"blockEditor\"]","webpack://wp-theme-zen/external window [\"wp\",\"components\"]","webpack://wp-theme-zen/./src/faq/index.js","webpack://wp-theme-zen/./src/faq-child/index.js"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blockEditor\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"components\"];","import { registerBlockType } from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\nimport { useBlockProps, InnerBlocks, InspectorControls } from '@wordpress/block-editor';\nimport { PanelBody, SelectControl, RangeControl, ColorPalette, Button } from '@wordpress/components';\nimport metadata from './block.json';\n\n\nif (!wp.blocks.getBlockType(metadata.name)) {\nregisterBlockType(metadata.name, {\n    ...metadata,\n    attributes: {\n        ...metadata.attributes,\n        faqItems: {\n            type: 'array',\n            default: [{ id: Date.now().toString(), question: '', content: '' }]\n        },\n        style: {\n            type: 'string',\n            default: 'simple'\n        },\n        dividerStyle: {\n            type: 'string',\n            default: 'solid'\n        },\n        dividerColor: {\n            type: 'string',\n            default: '#cccccc'\n        },\n        dividerWidth: {\n            type: 'number',\n            default: 1\n        },\n        boxColor: {\n            type: 'string',\n            default: '#ffffff'\n        },\n        boxBorderWidth: {\n            type: 'number',\n            default: 1\n        },\n        boxBorderColor: {\n            type: 'string',\n            default: '#000000'\n        },\n        boxBorderRadius: {\n            type: 'number',\n            default: 5\n        }\n    },\n    edit: ({ attributes, setAttributes, clientId }) => {\n        const blockProps = useBlockProps();\n        const { style, faqItems } = attributes;\n\n        const addFaqItem = () => {\n            const block = wp.blocks.createBlock('mytheme/faq-child', {\n                question: '',\n                answer: ''\n            });\n            const parentBlock = wp.data.select('core/block-editor').getBlock(clientId);\n            const newInnerBlocks = [...parentBlock.innerBlocks, block];\n            wp.data.dispatch('core/block-editor').replaceInnerBlocks(clientId, newInnerBlocks, false);\n        };\n\n        return (\n            <>\n                <InspectorControls>\n                    <PanelBody title={__('スタイル設定', 'mytheme')}>\n                        <SelectControl\n                            label={__('スタイル', 'mytheme')}\n                            value={style}\n                            options={[\n                                { label: __('シンプル', 'mytheme'), value: 'simple' },\n                                { label: __('区切り線', 'mytheme'), value: 'divider' },\n                                { label: __('ボックス', 'mytheme'), value: 'box' },\n                            ]}\n                            onChange={(value) => setAttributes({ style: value })}\n                        />\n                        {style === 'divider' && (\n                            <>\n                                <SelectControl\n                                    label={__('区切り線のスタイル', 'mytheme')}\n                                    value={attributes.dividerStyle}\n                                    options={[\n                                        { label: __('実線', 'mytheme'), value: 'solid' },\n                                        { label: __('点線', 'mytheme'), value: 'dotted' },\n                                        { label: __('破線', 'mytheme'), value: 'dashed' },\n                                    ]}\n                                    onChange={(value) => setAttributes({ dividerStyle: value })}\n                                />\n                                <div className=\"components-base-control\">\n                                    <span>{__('区切り線の色', 'mytheme')}</span>\n                                    <ColorPalette\n                                        value={attributes.dividerColor}\n                                        onChange={(value) => setAttributes({ dividerColor: value })}\n                                    />\n                                </div>\n                                <RangeControl\n                                    label={__('区切り線の太さ', 'mytheme')}\n                                    value={attributes.dividerWidth}\n                                    onChange={(value) => setAttributes({ dividerWidth: value })}\n                                    min={1}\n                                    max={10}\n                                />\n                            </>\n                        )}\n                        {style === 'box' && (\n                            <>\n                                <div className=\"components-base-control\">\n                                    <span>{__('ボックスの色', 'mytheme')}</span>\n                                    <ColorPalette\n                                        value={attributes.boxColor}\n                                        onChange={(value) => setAttributes({ boxColor: value })}\n                                    />\n                                </div>\n                                <RangeControl\n                                    label={__('ボックスの枠線の太さ', 'mytheme')}\n                                    value={attributes.boxBorderWidth}\n                                    onChange={(value) => setAttributes({ boxBorderWidth: value })}\n                                    min={0}\n                                    max={10}\n                                />\n                                <div className=\"components-base-control\">\n                                    <span>{__('ボックスの枠線の色', 'mytheme')}</span>\n                                    <ColorPalette\n                                        value={attributes.boxBorderColor}\n                                        onChange={(value) => setAttributes({ boxBorderColor: value })}\n                                    />\n                                </div>\n                                <RangeControl\n                                    label={__('ボックスの角の丸み', 'mytheme')}\n                                    value={attributes.boxBorderRadius}\n                                    onChange={(value) => setAttributes({ boxBorderRadius: value })}\n                                    min={0}\n                                    max={50}\n                                />\n                            </>\n                        )}\n                    </PanelBody>\n                </InspectorControls>\n                <div \n                    {...blockProps} \n                    className={`faq-block style-${style}`}\n                    style={\n                        style === 'divider' \n                            ? {\n                                borderBottom: `${attributes.dividerWidth}px ${attributes.dividerStyle} ${attributes.dividerColor}`\n                            } \n                            : style === 'box' \n                            ? {\n                                backgroundColor: attributes.boxColor,\n                                border: `${attributes.boxBorderWidth}px solid ${attributes.boxBorderColor}`,\n                                borderRadius: `${attributes.boxBorderRadius}px`,\n                                marginBottom: '10px'\n                            } \n                            : undefined\n                    }\n                >\n                  <InnerBlocks\n    template={[\n        ['mytheme/faq-child', {\n            question: __('質問を入力...', 'mytheme'),\n            answer: __('回答を入力...', 'mytheme')\n        }]\n    ]}\n    templateLock={false}\n    allowedBlocks={['mytheme/faq-child']}\n    renderAppender={() => (\n        <Button\n            isPrimary\n            onClick={addFaqItem}\n            className=\"add-faq-button\"\n            icon=\"plus\"\n        >\n            {__('FAQを追加', 'mytheme')}\n        </Button>\n                        )}\n                    />\n                </div>\n            </>\n        );\n    },\n    save: ({ attributes }) => {\n        const blockProps = useBlockProps.save();\n        const { style } = attributes;\n\n        return (\n            <div \n                {...blockProps} \n                className={`faq-block style-${style}`}\n                style={\n                    style === 'divider' \n                        ? {\n                            borderBottom: `${attributes.dividerWidth}px ${attributes.dividerStyle} ${attributes.dividerColor}`\n                        } \n                        : style === 'box' \n                        ? {\n                            backgroundColor: attributes.boxColor,\n                            border: `${attributes.boxBorderWidth}px solid ${attributes.boxBorderColor}`,\n                            borderRadius: `${attributes.boxBorderRadius}px`,\n                            marginBottom: '10px'\n                        } \n                        : undefined\n                }\n            >\n                <InnerBlocks.Content />\n            </div>\n        );\n    },\n    });\n}","import { registerBlockType } from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\nimport { useBlockProps, InnerBlocks, RichText, InspectorControls } from '@wordpress/block-editor';\nimport { PanelBody, SelectControl, RangeControl, ColorPalette } from '@wordpress/components';\n\nif (!wp.blocks.getBlockType('mytheme/faq-child')) {\n    registerBlockType('mytheme/faq-child', {\n        title: __('FAQ子ブロック', 'mytheme'),\n        description: __('FAQのアンサーブロックです', 'mytheme'),\n        category: 'zen',\n        icon: 'editor-help',\n        supports: {\n            html: false,\n        },\n        attributes: {\n            question: {\n                type: 'string',\n                source: 'html',\n                selector: '.faq-question'\n            },\n            style: {\n                type: 'string',\n                default: 'simple'\n            },\n            dividerStyle: {\n                type: 'string',\n                default: 'solid'\n            },\n            dividerColor: {\n                type: 'string',\n                default: '#cccccc'\n            },\n            dividerWidth: {\n                type: 'number',\n                default: 1\n            },\n            boxColor: {\n                type: 'string',\n                default: '#ffffff'\n            },\n            boxBorderWidth: {\n                type: 'number',\n                default: 1\n            },\n            boxBorderColor: {\n                type: 'string',\n                default: '#000000'\n            },\n            boxBorderRadius: {\n                type: 'number',\n                default: 5\n            },\n            iconStyle: {\n                type: 'string',\n                default: 'square'\n            },\n            iconSize: {\n                type: 'number',\n                default: 25\n            },\n            iconBorderWidth: {\n                type: 'number',\n                default: 1\n            },\n            iconFontSize: {\n                type: 'number',\n                default: 16\n            },\n            iconColor: {\n                type: 'string',\n                default: '#000000'\n            },\n            iconBackgroundColor: {\n                type: 'string',\n                default: '#ffffff'\n            },\n            iconBorderRadius: {\n                type: 'number',\n                default: 5\n            },\n            iconBorderColor: {\n                type: 'string',\n                default: '#000000'\n            },\n            questionBackgroundColor: {\n                type: 'string',\n                default: '#ffffff'\n            },\n            questionTextColor: {\n                type: 'string',\n                default: '#000000'\n            },\n            answerBackgroundColor: {\n                type: 'string',\n                default: '#ffffff'\n            },\n            answerTextColor: {\n                type: 'string',\n                default: '#000000'\n            }\n        },\n        edit: ({ attributes, setAttributes }) => {\n            const blockProps = useBlockProps();\n            const { style } = attributes;\n            return (\n                <>\n                    <InspectorControls>\n                        <PanelBody title={__('スタイル設定', 'mytheme')}>\n                            <SelectControl\n                                label={__('スタイル', 'mytheme')}\n                                value={style}\n                                options={[\n                                    { label: __('シンプル', 'mytheme'), value: 'simple' },\n                                    { label: __('区切り線', 'mytheme'), value: 'divider' },\n                                    { label: __('ボックス', 'mytheme'), value: 'box' },\n                                ]}\n                                onChange={(value) => setAttributes({ style: value })}\n                            />\n                            {style === 'divider' && (\n                                <>\n                                    <SelectControl\n                                        label={__('区切り線のスタイル', 'mytheme')}\n                                        value={attributes.dividerStyle}\n                                        options={[\n                                            { label: __('実線', 'mytheme'), value: 'solid' },\n                                            { label: __('点線', 'mytheme'), value: 'dotted' },\n                                            { label: __('破線', 'mytheme'), value: 'dashed' },\n                                        ]}\n                                        onChange={(value) => setAttributes({ dividerStyle: value })}\n                                    />\n                                    <div className=\"components-base-control\">\n                                        <span>{__('区切り線の色', 'mytheme')}</span>\n                                        <ColorPalette\n                                            value={attributes.dividerColor}\n                                            onChange={(value) => setAttributes({ dividerColor: value })}\n                                        />\n                                    </div>\n                                    <RangeControl\n                                        label={__('区切り線の太さ', 'mytheme')}\n                                        value={attributes.dividerWidth}\n                                        onChange={(value) => setAttributes({ dividerWidth: value })}\n                                        min={1}\n                                        max={10}\n                                    />\n                                </>\n                            )}\n                            {style === 'box' && (\n                                <>\n                                    <div className=\"components-base-control\">\n                                        <span>{__('ボックスの色', 'mytheme')}</span>\n                                        <ColorPalette\n                                            value={attributes.boxColor}\n                                            onChange={(value) => setAttributes({ boxColor: value })}\n                                        />\n                                    </div>\n                                    <RangeControl\n                                        label={__('ボックスの枠線の太さ', 'mytheme')}\n                                        value={attributes.boxBorderWidth}\n                                        onChange={(value) => setAttributes({ boxBorderWidth: value })}\n                                        min={0}\n                                        max={10}\n                                    />\n                                    <div className=\"components-base-control\">\n                                        <span>{__('ボックスの枠線の色', 'mytheme')}</span>\n                                        <ColorPalette\n                                            value={attributes.boxBorderColor}\n                                            onChange={(value) => setAttributes({ boxBorderColor: value })}\n                                        />\n                                    </div>\n                                    <RangeControl\n                                        label={__('ボックスの角の丸み', 'mytheme')}\n                                        value={attributes.boxBorderRadius}\n                                        onChange={(value) => setAttributes({ boxBorderRadius: value })}\n                                        min={0}\n                                        max={50}\n                                    />\n                                </>\n                            )}\n                        </PanelBody>\n                        <PanelBody title={__('アイコン設定', 'mytheme')}>\n                            <SelectControl\n                                label={__('アイコンスタイル', 'mytheme')}\n                                value={attributes.iconStyle}\n                                options={[\n                                    { label: __('四角', 'mytheme'), value: 'square' },\n                                    { label: __('丸', 'mytheme'), value: 'circle' },\n                                    { label: __('角丸', 'mytheme'), value: 'rounded' }\n                                ]}\n                                onChange={(value) => setAttributes({ iconStyle: value })}\n                            />\n                            {attributes.iconStyle === 'rounded' && (\n                                <RangeControl\n                                    label={__('アイコンの角の丸み', 'mytheme')}\n                                    value={attributes.iconBorderRadius}\n                                    onChange={(value) => setAttributes({ iconBorderRadius: value })}\n                                    min={0}\n                                    max={20}\n                                />\n                            )}\n                            <RangeControl\n                                label={__('アイコンサイズ', 'mytheme')}\n                                value={attributes.iconSize}\n                                onChange={(value) => setAttributes({ iconSize: value })}\n                                min={20}\n                                max={50}\n                            />\n                            <RangeControl\n                                label={__('アイコン枠線の太さ', 'mytheme')}\n                                value={attributes.iconBorderWidth}\n                                onChange={(value) => setAttributes({ iconBorderWidth: value })}\n                                min={0}\n                                max={5}\n                            />\n                            <RangeControl\n                                label={__('アイコンの文字サイズ', 'mytheme')}\n                                value={attributes.iconFontSize}\n                                onChange={(value) => setAttributes({ iconFontSize: value })}\n                                min={12}\n                                max={30}\n                            />\n                            <div className=\"components-base-control\">\n                                <span>{__('アイコンの色', 'mytheme')}</span>\n                                <ColorPalette\n                                    value={attributes.iconColor}\n                                    onChange={(value) => setAttributes({ iconColor: value })}\n                                />\n                            </div>\n                            <div className=\"components-base-control\">\n                                <span>{__('アイコンの背景色', 'mytheme')}</span>\n                                <ColorPalette\n                                    value={attributes.iconBackgroundColor}\n                                    onChange={(value) => setAttributes({ iconBackgroundColor: value })}\n                                />\n                            </div>\n                            <div className=\"components-base-control\">\n                                <span>{__('アイコンの枠線の色', 'mytheme')}</span>\n                                <ColorPalette\n                                    value={attributes.iconBorderColor}\n                                    onChange={(value) => setAttributes({ iconBorderColor: value })}\n                                />\n                            </div>\n                        </PanelBody>\n                        <PanelBody title={__('質問設定', 'mytheme')}>\n                            <div className=\"components-base-control\">\n                                <span>{__('背景色', 'mytheme')}</span>\n                                <ColorPalette\n                                    value={attributes.questionBackgroundColor}\n                                    onChange={(value) => setAttributes({ questionBackgroundColor: value })}\n                                />\n                            </div>\n                            <div className=\"components-base-control\">\n                                <span>{__('文字色', 'mytheme')}</span>\n                                <ColorPalette\n                                    value={attributes.questionTextColor}\n                                    onChange={(value) => setAttributes({ questionTextColor: value })}\n                                />\n                            </div>\n                        </PanelBody>\n                        <PanelBody title={__('回答設定', 'mytheme')}>\n                            <div className=\"components-base-control\">\n                                <span>{__('背景色', 'mytheme')}</span>\n                                <ColorPalette\n                                    value={attributes.answerBackgroundColor}\n                                    onChange={(value) => setAttributes({ answerBackgroundColor: value })}\n                                />\n                            </div>\n                            <div className=\"components-base-control\">\n                                <span>{__('文字色', 'mytheme')}</span>\n                                <ColorPalette\n                                    value={attributes.answerTextColor}\n                                    onChange={(value) => setAttributes({ answerTextColor: value })}\n                                />\n                            </div>\n                        </PanelBody>\n                    </InspectorControls>\n                    <div\n                        {...blockProps}\n                        className={`faq-child-block style-${style}`}\n                        style={\n                            style === 'divider'\n                                ? {\n                                    borderBottom: `${attributes.dividerWidth}px ${attributes.dividerStyle} ${attributes.dividerColor}`\n                                }\n                                : style === 'box'\n                                    ? {\n                                        backgroundColor: attributes.boxColor,\n                                        border: `${attributes.boxBorderWidth}px solid ${attributes.boxBorderColor}`,\n                                        borderRadius: `${attributes.boxBorderRadius}px`,\n                                        marginBottom: '10px'\n                                    }\n                                    : undefined\n                        }\n                    >\n                        <div className=\"faq-question-wrapper\"\n                            style={{\n                                backgroundColor: attributes.questionBackgroundColor,\n                                color: attributes.questionTextColor\n                            }}\n                        >\n                            <span\n                                className={`faq-icon ${attributes.iconStyle === 'circle' ? 'faq-icon-circle' : attributes.iconStyle === 'rounded' ? 'faq-icon-rounded' : ''}`}\n                                style={{\n                                    width: attributes.iconSize + 'px',\n                                    height: attributes.iconSize + 'px',\n                                    borderWidth: attributes.iconBorderWidth + 'px',\n                                    fontSize: attributes.iconFontSize + 'px',\n                                    color: attributes.iconColor,\n                                    backgroundColor: attributes.iconBackgroundColor,\n                                    borderColor: attributes.iconBorderColor,\n                                    borderRadius: attributes.iconStyle === 'rounded' ? `${attributes.iconBorderRadius}px` : undefined\n                                }}\n                            >\n                                Q\n                            </span>\n                            <RichText\n                                tagName=\"h4\"\n                                className=\"faq-question\"\n                                value={attributes.question}\n                                onChange={(value) => setAttributes({ question: value })}\n                                placeholder={__('質問を入力...', 'mytheme')}\n                                style={{\n                                    color: attributes.questionTextColor\n                                }}\n                            />\n                        </div>\n                        <div className=\"faq-answer-wrapper\"\n                            style={{\n                                backgroundColor: attributes.answerBackgroundColor,\n                                color: attributes.answerTextColor\n                            }}\n                        >\n                            <span\n                                className={`faq-icon ${attributes.iconStyle === 'circle' ? 'faq-icon-circle' : attributes.iconStyle === 'rounded' ? 'faq-icon-rounded' : ''}`}\n                                style={{\n                                    width: attributes.iconSize + 'px',\n                                    height: attributes.iconSize + 'px',\n                                    borderWidth: attributes.iconBorderWidth + 'px',\n                                    fontSize: attributes.iconFontSize + 'px',\n                                    color: attributes.iconColor,\n                                    backgroundColor: attributes.iconBackgroundColor,\n                                    borderColor: attributes.iconBorderColor,\n                                    borderRadius: attributes.iconStyle === 'rounded' ? `${attributes.iconBorderRadius}px` : undefined\n                                }}\n                            >\n                                A\n                            </span>\n                            <div className=\"faq-answer\">\n                                <InnerBlocks\n                                    template={[\n                                        ['core/paragraph', {\n                                            placeholder: __('回答を入力...', 'mytheme')\n                                        }]\n                                    ]}\n                                    templateLock={false}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </>\n            );\n        },\n        save: ({ attributes }) => {\n            const blockProps = useBlockProps.save();\n            const { style } = attributes;\n            return (\n                <div\n                    {...blockProps}\n                    className={`faq-block style-${style}`}\n                    style={\n                        style === 'divider'\n                            ? {\n                                borderBottom: `${attributes.dividerWidth}px ${attributes.dividerStyle} ${attributes.dividerColor}`\n                            }\n                            : style === 'box'\n                                ? {\n                                    backgroundColor: attributes.boxColor,\n                                    border: `${attributes.boxBorderWidth}px solid ${attributes.boxBorderColor}`,\n                                    borderRadius: `${attributes.boxBorderRadius}px`,\n                                    marginBottom: '10px'\n                                }\n                                : undefined\n                    }\n                >\n                    <div className=\"faq-question-wrapper\"\n                        style={{\n                            backgroundColor: attributes.questionBackgroundColor,\n                        }}\n                    >\n                        <span\n                            className={`faq-icon ${attributes.iconStyle === 'circle' ? 'faq-icon-circle' : attributes.iconStyle === 'rounded' ? 'faq-icon-rounded' : ''}`}\n                            style={{\n                                width: attributes.iconSize + 'px',\n                                height: attributes.iconSize + 'px',\n                                borderWidth: attributes.iconBorderWidth + 'px',\n                                fontSize: attributes.iconFontSize + 'px',\n                                color: attributes.iconColor,\n                                backgroundColor: attributes.iconBackgroundColor,\n                                borderColor: attributes.iconBorderColor,\n                                borderRadius: attributes.iconStyle === 'rounded' ? `${attributes.iconBorderRadius}px` : undefined\n                            }}\n                        >\n                            Q\n                        </span>\n                        <RichText.Content\n                            tagName=\"h4\"\n                            className=\"faq-question\"\n                            value={attributes.question}\n                            style={{\n                                color: attributes.questionTextColor\n                            }}\n                        />\n                    </div>\n                    <div className=\"faq-answer-wrapper\"\n    style={{\n        backgroundColor: attributes.answerBackgroundColor,\n        color: attributes.answerTextColor\n    }}\n>\n                        <span\n                            className={`faq-icon ${attributes.iconStyle === 'circle' ? 'faq-icon-circle' : attributes.iconStyle === 'rounded' ? 'faq-icon-rounded' : ''}`}\n                            style={{\n                                width: attributes.iconSize + 'px',\n                                height: attributes.iconSize + 'px',\n                                borderWidth: attributes.iconBorderWidth + 'px',\n                                fontSize: attributes.iconFontSize + 'px',\n                                color: attributes.iconColor,\n                                backgroundColor: attributes.iconBackgroundColor,\n                                borderColor: attributes.iconBorderColor,\n                                borderRadius: attributes.iconStyle === 'rounded' ? `${attributes.iconBorderRadius}px` : undefined\n                            }}\n                        >\n                            A\n                        </span>\n                        <div className=\"faq-answer\">\n                            <InnerBlocks.Content />\n                        </div>\n                    </div>\n                </div>\n            );\n        },\n    });\n}"],"names":["window","wp","blocks","getBlockType","metadata","registerBlockType","_objectSpread","attributes","faqItems","type","default","id","Date","now","toString","question","content","style","dividerStyle","dividerColor","dividerWidth","boxColor","boxBorderWidth","boxBorderColor","boxBorderRadius","edit","_ref","setAttributes","clientId","blockProps","useBlockProps","addFaqItem","block","createBlock","answer","parentBlock","data","select","getBlock","newInnerBlocks","concat","innerBlocks","dispatch","replaceInnerBlocks","React","createElement","Fragment","InspectorControls","PanelBody","title","__","SelectControl","label","value","options","onChange","className","ColorPalette","RangeControl","min","max","_extends","borderBottom","backgroundColor","border","borderRadius","marginBottom","undefined","InnerBlocks","template","templateLock","allowedBlocks","renderAppender","Button","isPrimary","onClick","icon","save","_ref2","Content","description","category","supports","html","source","selector","iconStyle","iconSize","iconBorderWidth","iconFontSize","iconColor","iconBackgroundColor","iconBorderRadius","iconBorderColor","questionBackgroundColor","questionTextColor","answerBackgroundColor","answerTextColor","color","width","height","borderWidth","fontSize","borderColor","RichText","tagName","placeholder"],"sourceRoot":""}