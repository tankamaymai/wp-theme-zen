{"version":3,"file":"responsive.bundle.js","mappings":"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","sources":["webpack://wp-theme-zen/./js/responsive.js"],"sourcesContent":["(function (wp) {\n    var el = wp.element.createElement;\n    var Fragment = wp.element.Fragment;\n    var InspectorControls = wp.blockEditor.InspectorControls;\n    var PanelBody = wp.components.PanelBody;\n    var SelectControl = wp.components.SelectControl;\n    var useSelect = wp.data.useSelect;\n    var useDispatch = wp.data.useDispatch;\n    var subscribe = wp.data.subscribe;\n\n    // ブロックの属性を拡張\n    function addResponsiveAttributes(settings, name) {\n        if (typeof settings.attributes !== 'undefined') {\n            settings.attributes = Object.assign(settings.attributes, {\n                displayOnDesktop: {\n                    type: 'string',\n                    default: 'show'\n                },\n                displayOnTablet: {\n                    type: 'string',\n                    default: 'show'\n                },\n                displayOnMobile: {\n                    type: 'string',\n                    default: 'show'\n                }\n            });\n        }\n        return settings;\n    }\n\n    wp.hooks.addFilter(\n        'blocks.registerBlockType',\n        'my-plugin/add-responsive-attributes',\n        addResponsiveAttributes\n    );\n\n    var responsiveControls = wp.compose.createHigherOrderComponent(function (BlockEdit) {\n        return function (props) {\n            var attributes = props.attributes;\n            var setAttributes = props.setAttributes;\n\n            // クラス名を更新する関数\n            const updateClassName = (newAttributes) => {\n                let newClassName = className ? className.split(' ') : [];\n\n                ['Desktop', 'Tablet', 'Mobile'].forEach(device => {\n                    const hideClass = `hide-on-${device.toLowerCase()}`;\n                    if (newAttributes[`displayOn${device}`] === 'hide') {\n                        if (!newClassName.includes(hideClass)) {\n                            newClassName.push(hideClass);\n                        }\n                    } else {\n                        newClassName = newClassName.filter(c => c !== hideClass);\n                    }\n                });\n\n                props.setAttributes({ className: newClassName.join(' ') });\n            };\n\n            // 表示設定が変更されたときの処理\n            const onChangeDisplay = (device, newValue) => {\n                const newAttributes = { ...attributes, [`displayOn${device}`]: newValue };\n                setAttributes(newAttributes);\n                updateClassName(newAttributes);\n            };\n\n            var deviceType = useSelect(function (select) {\n                const { __experimentalGetPreviewDeviceType } = select('core/edit-post');\n                return __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : 'Desktop';\n            }, []);\n\n            var { __experimentalSetPreviewDeviceType: setPreviewDeviceType } = useDispatch('core/edit-post');\n\n            wp.element.useEffect(function () {\n                var unsubscribe = subscribe(function () {\n                    var newDeviceType = wp.data.select('core/edit-post').__experimentalGetPreviewDeviceType();\n                    if (newDeviceType && newDeviceType !== deviceType) {\n                        setPreviewDeviceType(newDeviceType);\n                    }\n                });\n\n                return function () {\n                    unsubscribe();\n                };\n            }, [deviceType]);\n\n            var responsiveStyles = {\n                opacity: 1,\n            };\n\n            if (\n                (deviceType === 'Desktop' && attributes.displayOnDesktop === 'hide') ||\n                (deviceType === 'Tablet' && attributes.displayOnTablet === 'hide') ||\n                (deviceType === 'Mobile' && attributes.displayOnMobile === 'hide')\n            ) {\n                responsiveStyles.opacity = 0.3;\n            }\n\n            var responsiveSettings = el(\n                PanelBody,\n                { title: el(Fragment, {}, \n                    'レスポンシブ設定'\n                ), initialOpen: false },\n                el(SelectControl, {\n                    label: 'デスクトップで表示',\n                    value: attributes.displayOnDesktop || 'show',\n                    options: [\n                        { label: '表示', value: 'show' },\n                        { label: '非表示', value: 'hide' },\n                    ],\n                    onChange: function (newVisibility) {\n                        setAttributes({ displayOnDesktop: newVisibility });\n                    },\n                }),\n                el(SelectControl, {\n                    label: 'タブレットで表示',\n                    value: attributes.displayOnTablet || 'show',\n                    options: [\n                        { label: '表示', value: 'show' },\n                        { label: '非表示', value: 'hide' },\n                    ],\n                    onChange: function (newVisibility) {\n                        setAttributes({ displayOnTablet: newVisibility });\n                    },\n                }),\n                el(SelectControl, {\n                    label: 'モバイルで表示',\n                    value: attributes.displayOnMobile || 'show',\n                    options: [\n                        { label: '表示', value: 'show' },\n                        { label: '非表示', value: 'hide' },\n                    ],\n                    onChange: function (newVisibility) {\n                        setAttributes({ displayOnMobile: newVisibility });\n                    },\n                })\n            );\n\n            return el(\n                Fragment,\n                {},\n                el(\n                    'div',\n                    { style: responsiveStyles },\n                    el(BlockEdit, props)\n                ),\n                el(\n                    InspectorControls,\n                    {},\n                    responsiveSettings\n                )\n            );\n        };\n    }, 'responsiveControls');\n\n    wp.hooks.addFilter('editor.BlockEdit', 'my-plugin/add-responsive-controls', responsiveControls);\n\n    var applyResponsiveClasses = function (extraProps, blockType, attributes) {\n        var responsiveClasses = [\n            attributes.displayOnDesktop === 'hide' ? 'hide-on-desktop' : '',\n            attributes.displayOnTablet === 'hide' ? 'hide-on-tablet' : '',\n            attributes.displayOnMobile === 'hide' ? 'hide-on-mobile' : '',\n        ].filter(Boolean).join(' ');\n\n        if (responsiveClasses) {\n            extraProps.className = extraProps.className\n                ? extraProps.className + ' ' + responsiveClasses\n                : responsiveClasses;\n        }\n\n        return extraProps;\n    };\n\n    wp.hooks.addFilter('blocks.getSaveContent.extraProps', 'my-plugin/apply-responsive-classes', applyResponsiveClasses);\n\n})(window.wp);"],"names":["wp","el","element","createElement","Fragment","InspectorControls","blockEditor","PanelBody","components","SelectControl","useSelect","data","useDispatch","subscribe","hooks","addFilter","settings","name","attributes","Object","assign","displayOnDesktop","type","default","displayOnTablet","displayOnMobile","responsiveControls","compose","createHigherOrderComponent","BlockEdit","props","setAttributes","deviceType","select","__experimentalGetPreviewDeviceType","setPreviewDeviceType","__experimentalSetPreviewDeviceType","useEffect","unsubscribe","newDeviceType","responsiveStyles","opacity","responsiveSettings","title","initialOpen","label","value","options","onChange","newVisibility","style","extraProps","blockType","responsiveClasses","filter","Boolean","join","className","window"],"sourceRoot":""}